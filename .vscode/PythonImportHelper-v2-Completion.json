[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "ClientORM",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "ReservationORM",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "ClientORM",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "ReservationORM",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.config.config",
        "description": "app.config.config",
        "isExtraImport": true,
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ClientRequest",
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "ClientDTO",
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "ClientRequest",
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "ClientRequest",
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ReservationRequest",
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "ReservationDTO",
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "ReservationRequest",
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "ReservationRequest",
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "isExtraImport": true,
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "create_client_service",
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "isExtraImport": true,
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "delete_client_service",
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "isExtraImport": true,
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "get_all_clients_service",
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "isExtraImport": true,
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "create_reservation_service",
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "isExtraImport": true,
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "delete_reservation_service",
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "isExtraImport": true,
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "get_all_reservations_service",
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "isExtraImport": true,
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "isExtraImport": true,
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "delete_client",
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "isExtraImport": true,
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "get_all_clients",
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "isExtraImport": true,
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "create_reservation",
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "isExtraImport": true,
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "delete_reservation",
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "isExtraImport": true,
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "get_all_reservations",
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "isExtraImport": true,
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "client_routes",
        "importPath": "app.routes",
        "description": "app.routes",
        "isExtraImport": true,
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "reservation_routes",
        "importPath": "app.routes",
        "description": "app.routes",
        "isExtraImport": true,
        "detail": "app.routes",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "description": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "description": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.1ea4c155788e_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "description": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('Clients',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('full_name', sa.String(), nullable=True),\n    sa.Column('phone_number', sa.String(), nullable=True),\n    sa.Column('email', sa.String(), nullable=True),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('email'),\n    sa.UniqueConstraint('phone_number')",
        "detail": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "description": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_Reservations_id'), table_name='Reservations')\n    op.drop_table('Reservations')\n    op.drop_index(op.f('ix_Clients_id'), table_name='Clients')\n    op.drop_index(op.f('ix_Clients_full_name'), table_name='Clients')\n    op.drop_table('Clients')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.348b0e1b3f6b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "description": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "description": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.4613443f6f40_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "description": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "description": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5506c974021b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "description": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "description": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.6ffc5f0588a4_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "description": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "description": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.744593d10b5d_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "description": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "description": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.75bd9cce14c1_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "description": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "description": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.83b2e1b5ed9a_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "description": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "description": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.bbcf6f79e57c_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "description": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "description": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.bc0979c3fa0b_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "description": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "description": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.df1ebee9154a_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "description": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "description": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.fc54dab2e80c_create_table_clients_and_reservations",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DATABASE_URL\")\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.config.config",
        "description": "app.config.config",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.config.config",
        "documentation": {}
    },
    {
        "label": "ClientORM",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class ClientORM(Base):\n    __tablename__= 'Clients'\n    id = Column(Integer, primary_key=True, index=True)\n    full_name = Column(String, index=True)\n    phone_number = Column(String, unique=True)\n    email = Column(String, unique=True)\n    reservations = relationship(\"ReservationORM\", back_populates=\"client\")\nclass ReservationORM(Base):\n    __tablename__= 'Reservations'\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "ReservationORM",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class ReservationORM(Base):\n    __tablename__= 'Reservations'\n    id = Column(Integer, primary_key=True, index=True)\n    reservation_code = Column(String, unique=True)\n    date= Column(Date)\n    client_id = Column(Integer, ForeignKey(\"Clients.id\"))\n    client = relationship(\"ClientORM\", back_populates=\"reservations\")",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "get_all_clients",
        "kind": 2,
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "peekOfCode": "def get_all_clients(db:Session) -> List[ClientORM]:\n    return db.query(ClientORM).all()\ndef create_client(db:Session, client:ClientRequest)->ClientORM:\n    existing_client=db.query(ClientORM).filter(\n        (ClientORM.phone_number == client.phone_number) |\n        (ClientORM.email == client.email)\n    ).first()\n    if existing_client:\n        conflict_field = 'número de teléfono' if existing_client.phone_number == client.phone_number else 'correo electrónico'\n        raise HTTPException(status_code=400, detail=f\"Ya existe un cliente con ese {conflict_field}.\")",
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "create_client",
        "kind": 2,
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "peekOfCode": "def create_client(db:Session, client:ClientRequest)->ClientORM:\n    existing_client=db.query(ClientORM).filter(\n        (ClientORM.phone_number == client.phone_number) |\n        (ClientORM.email == client.email)\n    ).first()\n    if existing_client:\n        conflict_field = 'número de teléfono' if existing_client.phone_number == client.phone_number else 'correo electrónico'\n        raise HTTPException(status_code=400, detail=f\"Ya existe un cliente con ese {conflict_field}.\")\n    db_client = ClientORM(\n        full_name=client.full_name,",
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "delete_client",
        "kind": 2,
        "importPath": "app.repositories.client_repository",
        "description": "app.repositories.client_repository",
        "peekOfCode": "def delete_client(uid:int, db:Session)->bool:\n    client = db.query(ClientORM).filter(ClientORM.id == uid).first()\n    if not client:\n        raise HTTPException(status_code=404, detail=\"Cliente no encontrado\")\n    reservation = db.query(ReservationORM).filter(ReservationORM.client_id== client.id).first()\n    if reservation is not None:\n        raise HTTPException(status_code=400, detail=f\"No se puede eliminar el cliente porque tiene reservaciones asociadas. ID de reservación: {reservation.id}\")\n    db.delete(client)\n    db.commit()\n    return True",
        "detail": "app.repositories.client_repository",
        "documentation": {}
    },
    {
        "label": "get_all_reservations",
        "kind": 2,
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "peekOfCode": "def get_all_reservations(db:Session)->List[ReservationORM]:\n    return db.query(ReservationORM).all()\ndef create_reservation(db:Session, reser:ReservationRequest)->ReservationORM:\n    existing_code = db.query(ReservationORM).filter(ReservationORM.reservation_code == reser.reservation_code).first()\n    existing_cliente = db.query(ClientORM).filter(ClientORM.id == reser.client_id).first()\n    active_reservations_count  = db.query(ReservationORM).filter(ReservationORM.client_id == reser.client_id).count()\n    if existing_cliente is None:\n        raise HTTPException(status_code=404, detail=\"Cliente no encontrado, no se puede crear la reserva.\")\n    if active_reservations_count  >= 5:\n        raise HTTPException(status_code=400, detail=\"Se ha alcanzado el límite máximo de reservas por cliente (5 reservas activas).\")",
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "create_reservation",
        "kind": 2,
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "peekOfCode": "def create_reservation(db:Session, reser:ReservationRequest)->ReservationORM:\n    existing_code = db.query(ReservationORM).filter(ReservationORM.reservation_code == reser.reservation_code).first()\n    existing_cliente = db.query(ClientORM).filter(ClientORM.id == reser.client_id).first()\n    active_reservations_count  = db.query(ReservationORM).filter(ReservationORM.client_id == reser.client_id).count()\n    if existing_cliente is None:\n        raise HTTPException(status_code=404, detail=\"Cliente no encontrado, no se puede crear la reserva.\")\n    if active_reservations_count  >= 5:\n        raise HTTPException(status_code=400, detail=\"Se ha alcanzado el límite máximo de reservas por cliente (5 reservas activas).\")\n    if existing_code:\n        raise HTTPException(status_code=400, detail=f\"Ya existe una reservación con ese código: {existing_code.reservation_code}.\")",
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "delete_reservation",
        "kind": 2,
        "importPath": "app.repositories.reservations_repository",
        "description": "app.repositories.reservations_repository",
        "peekOfCode": "def delete_reservation(uid:int, db:Session)->bool:\n    reser=db.query(ReservationORM).filter(ReservationORM.id == uid).first()\n    if not reser:\n        raise HTTPException(status_code=404, detail=\"Reservación no encontrada\")\n    db.delete(reser)\n    db.commit()\n    return True",
        "detail": "app.repositories.reservations_repository",
        "documentation": {}
    },
    {
        "label": "get_clients",
        "kind": 2,
        "importPath": "app.routes.client_routes",
        "description": "app.routes.client_routes",
        "peekOfCode": "def get_clients(db:Session = Depends(get_db)):\n    clients=get_all_clients_service(db)\n    if not clients:\n        raise HTTPException(status_code=404, detail=\"NO HAY CLIENTES\")\n    return clients\n@router.post('/clients', response_model=ClientDTO)\ndef create_client(client:ClientRequest, db:Session = Depends(get_db)):\n    create_client = create_client_service(client, db)\n    if not create_client:\n        raise HTTPException(status_code=404, detail=\"NO SE HA PODIDO CREAR EL CLIENTE\")",
        "detail": "app.routes.client_routes",
        "documentation": {}
    },
    {
        "label": "create_client",
        "kind": 2,
        "importPath": "app.routes.client_routes",
        "description": "app.routes.client_routes",
        "peekOfCode": "def create_client(client:ClientRequest, db:Session = Depends(get_db)):\n    create_client = create_client_service(client, db)\n    if not create_client:\n        raise HTTPException(status_code=404, detail=\"NO SE HA PODIDO CREAR EL CLIENTE\")\n    return create_client\n@router.delete('clients/{uid}', response_model=dict)\ndef delete_client(uid:int, db:Session = Depends(get_db)):\n    success = delete_client_service(uid, db)\n    print(success)\n    if not success:",
        "detail": "app.routes.client_routes",
        "documentation": {}
    },
    {
        "label": "delete_client",
        "kind": 2,
        "importPath": "app.routes.client_routes",
        "description": "app.routes.client_routes",
        "peekOfCode": "def delete_client(uid:int, db:Session = Depends(get_db)):\n    success = delete_client_service(uid, db)\n    print(success)\n    if not success:\n        raise HTTPException(status_code=404, detail=\"CLIENTE NO ENCONTRADO\")\n    return {\"detail\": \"Cliente Eliminado Correctamente\"}",
        "detail": "app.routes.client_routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.client_routes",
        "description": "app.routes.client_routes",
        "peekOfCode": "router = APIRouter()\n@router.get('/clients', response_model=List[ClientDTO])\ndef get_clients(db:Session = Depends(get_db)):\n    clients=get_all_clients_service(db)\n    if not clients:\n        raise HTTPException(status_code=404, detail=\"NO HAY CLIENTES\")\n    return clients\n@router.post('/clients', response_model=ClientDTO)\ndef create_client(client:ClientRequest, db:Session = Depends(get_db)):\n    create_client = create_client_service(client, db)",
        "detail": "app.routes.client_routes",
        "documentation": {}
    },
    {
        "label": "get_reservations",
        "kind": 2,
        "importPath": "app.routes.reservation_routes",
        "description": "app.routes.reservation_routes",
        "peekOfCode": "def get_reservations(db:Session = Depends(get_db)):\n    resers = get_all_reservations_service(db)\n    if not resers:\n        raise HTTPException(status_code=404, detail=\"NO HAY RESERVACIONES\")\n    return resers\n@router.post('/reservations', response_model=ReservationDTO)\ndef create_reservation(reser:ReservationRequest, db:Session = Depends(get_db)):\n    create_reservation = create_reservation_service(reser, db)\n    if not create_reservation:\n        raise HTTPException(status_code=404, detail=\"NO SE HA PODIDO CREAR LA RESERVACIÓN\")",
        "detail": "app.routes.reservation_routes",
        "documentation": {}
    },
    {
        "label": "create_reservation",
        "kind": 2,
        "importPath": "app.routes.reservation_routes",
        "description": "app.routes.reservation_routes",
        "peekOfCode": "def create_reservation(reser:ReservationRequest, db:Session = Depends(get_db)):\n    create_reservation = create_reservation_service(reser, db)\n    if not create_reservation:\n        raise HTTPException(status_code=404, detail=\"NO SE HA PODIDO CREAR LA RESERVACIÓN\")\n    return create_reservation\n@router.delete('reservations/{uid}', response_model=dict)\ndef delete_reservation(uid:int, db:Session = Depends(get_db)):\n    success = delete_reservation_service(uid, db)\n    if not success:\n        raise HTTPException(status_code=404, detail=\"RESERVACIÓN NO ENCONTRADA\")",
        "detail": "app.routes.reservation_routes",
        "documentation": {}
    },
    {
        "label": "delete_reservation",
        "kind": 2,
        "importPath": "app.routes.reservation_routes",
        "description": "app.routes.reservation_routes",
        "peekOfCode": "def delete_reservation(uid:int, db:Session = Depends(get_db)):\n    success = delete_reservation_service(uid, db)\n    if not success:\n        raise HTTPException(status_code=404, detail=\"RESERVACIÓN NO ENCONTRADA\")\n    return {\"detail\": \"Reservación Eliminada Correctamente\"}",
        "detail": "app.routes.reservation_routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.reservation_routes",
        "description": "app.routes.reservation_routes",
        "peekOfCode": "router = APIRouter()\n@router.get('/reservations', response_model=List[ReservationDTO])\ndef get_reservations(db:Session = Depends(get_db)):\n    resers = get_all_reservations_service(db)\n    if not resers:\n        raise HTTPException(status_code=404, detail=\"NO HAY RESERVACIONES\")\n    return resers\n@router.post('/reservations', response_model=ReservationDTO)\ndef create_reservation(reser:ReservationRequest, db:Session = Depends(get_db)):\n    create_reservation = create_reservation_service(reser, db)",
        "detail": "app.routes.reservation_routes",
        "documentation": {}
    },
    {
        "label": "ClientRequest",
        "kind": 6,
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "peekOfCode": "class ClientRequest(BaseModel):\n    full_name: str = Field(..., min_length=3)\n    phone_number: str\n    email: EmailStr\nclass ClientDTO(BaseModel):\n    id: int\n    full_name: str\n    phone_number: str\n    email: EmailStr\n    class Config:",
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "ClientDTO",
        "kind": 6,
        "importPath": "app.schemas.client_schemas",
        "description": "app.schemas.client_schemas",
        "peekOfCode": "class ClientDTO(BaseModel):\n    id: int\n    full_name: str\n    phone_number: str\n    email: EmailStr\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.client_schemas",
        "documentation": {}
    },
    {
        "label": "ReservationRequest",
        "kind": 6,
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "peekOfCode": "class ReservationRequest(BaseModel):\n    reservation_code: str\n    date: date\n    client_id: int\nclass ReservationDTO(BaseModel):\n    id: int\n    reservation_code: str\n    date: date\n    client_id: int\n    class Config:",
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "ReservationDTO",
        "kind": 6,
        "importPath": "app.schemas.reservations_schemas",
        "description": "app.schemas.reservations_schemas",
        "peekOfCode": "class ReservationDTO(BaseModel):\n    id: int\n    reservation_code: str\n    date: date\n    client_id: int\n    class Config:\n        orm_mode = True",
        "detail": "app.schemas.reservations_schemas",
        "documentation": {}
    },
    {
        "label": "get_all_clients_service",
        "kind": 2,
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "peekOfCode": "def get_all_clients_service(db:Session):\n    return get_all_clients(db)\ndef create_client_service(db:Session, client:ClientRequest):\n    return create_client(client, db)\ndef delete_client_service(uid:int, db:Session):\n    return delete_client(uid, db)",
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "create_client_service",
        "kind": 2,
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "peekOfCode": "def create_client_service(db:Session, client:ClientRequest):\n    return create_client(client, db)\ndef delete_client_service(uid:int, db:Session):\n    return delete_client(uid, db)",
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "delete_client_service",
        "kind": 2,
        "importPath": "app.services.client_services",
        "description": "app.services.client_services",
        "peekOfCode": "def delete_client_service(uid:int, db:Session):\n    return delete_client(uid, db)",
        "detail": "app.services.client_services",
        "documentation": {}
    },
    {
        "label": "get_all_reservations_service",
        "kind": 2,
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "peekOfCode": "def get_all_reservations_service(db:Session):\n    return get_all_reservations(db)\ndef create_reservation_service(db:Session, reser:ReservationRequest):\n    return create_reservation(reser, db)\ndef delete_reservation_service(uid:int, db:Session):\n    return delete_reservation(uid, db)",
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "create_reservation_service",
        "kind": 2,
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "peekOfCode": "def create_reservation_service(db:Session, reser:ReservationRequest):\n    return create_reservation(reser, db)\ndef delete_reservation_service(uid:int, db:Session):\n    return delete_reservation(uid, db)",
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "delete_reservation_service",
        "kind": 2,
        "importPath": "app.services.reservation_services",
        "description": "app.services.reservation_services",
        "peekOfCode": "def delete_reservation_service(uid:int, db:Session):\n    return delete_reservation(uid, db)",
        "detail": "app.services.reservation_services",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI() # type: ignore\napp.include_router(client_routes.router\n                   , prefix='/clients',\n                   tags=[\"Clients\"])\napp.include_router(reservation_routes.router\n                   , prefix='/reservations',\n                   tags=[\"Reservations\"])\n@app.get(\"/\")\nasync def root():\n    return {\"Parcial 1: Marlon Campo - 240220231004\"}",
        "detail": "app.main",
        "documentation": {}
    }
]